=t=PEAR::HTTP_Client=t=

The PHP Extension and Application Repository (PEAR) project houses a library of reusable components written in PHP and a package system for distributing them, one of which is the ''HTTP_Client'' package that will be covered in the section to follow. PEAR spurred the creation of the PECL project, a repository of C extensions from which the pecl_http extension discussed in the previous section originates.

One trait of many components in PEAR is backward compatibility with older versions of PHP. The ''HTTP_Client'' package itself only requires 4.3.0, while the latest and last version of the PHP 4 branch is 4.4.9. As such, this client may be a good solution when feature requirements are more advanced than what the HTTP streams wrapper natively supports and the intended runtime environment is restricted to an older PHP version. Otherwise, if you still want an HTTP client written in PHP, have a look at Zend_Http_Client as described in the next section. It should go without saying that support for PHP 4.x has ceased and that it is highly advisable to run a more current stable version of PHP in production environments.

PHP source tarballs have a configure option to include PEAR when compiling. Some operating systems may have a package for PEAR apart from PHP itself. Once PEAR is installed, ''pear install HTTP_Client'' should be sufficient to install ''PEAR::HTTP_Client''. There is also the option to manually download tarballs for the necessary PEAR packages (''HTTP_Client'', ''HTTP_Request'', ''Net_URL'', and ''Net_Socket''), though this is a bit more difficult to maintain in the long term as updates are released.

{{PEAR Developments

At the time of writing, efforts are being put into PEAR 2, the successor to the current incarnation of the PEAR project. This will include a newer package distribution system and ports or revamps of many existing packages to bring them up-to-date with features available in PHP 5. However, because there is currently little in the way of stable ported code for PEAR 2, coverage in this book will be limited to PEAR 1. }}

=1=Requests and Responses=1=

There are two ways to perform HTTP requests with the related PEAR components: ''HTTP_Request'' and ''HTTP_Client''. The latter composes the former to add capabilities such as handling redirects and persisting headers, cookie data, and request parameters across multiple requests. Here's how to perform a simple request and extract response information when using ''HTTP_Request'' directly. 

<code php>
<?php
require_once 'HTTP/Request.php';

$request =& HTTP_Request('http://localhost.example');
$request->setMethod(HTTP_REQUEST_METHOD_GET);
$request->setURL('http://localhost.example');
$response = $request->sendRequest();
?>
</code>

- The ''HTTP_Request'' constructor has two parameters, both of which are optional. The first is a string containing the URL for the request; note that the ''setURL'' method is an alternative way to specify a value for this. The second is a parameters array, which will be discussed later. 
- By default, the GET method is used. ''setMethod'' is used to change this using constants, the names for which are formed by prefixing the desired request method with ''HTTP_REQUEST_METHOD_'' as in ''HTTP_REQUEST_METHOD_GET''.
- ''sendRequest'' intuitively dispatches the request and obtains the response. It returns either ''true'' to indicate that that request succeeded or an error object (of the ''PEAR_Error'' class by default) if an issue occurred.

Issues that cause errors include environmental requirements of the component not being met or the target of the request exceeding the redirect limit. ''PEAR::isError'' is used to determine if the ''sendRequest'' call resulted in an error. If the request is sent successfully, several methods of the request object are available to extract response information.

<code php>
<?php
if (!PEAR::isError($response)) {
    $code = $request->getResponseCode();
    $reason = $request->getResponseReason();
    $body = $request->getResponseBody();
    $cookies = $request->getResponseCookies();
    $headers = $request->getResponseHeader();
    $contentType = $request->getResponseHeader('Content-Type');
}
?>
</code>

Here are a few specifics about the response information methods.

- ''getResponseCode'' returns an integer containing the HTTP status code.
- ''getResponseReason'' returns a string containing a description that corresponds to the HTTP status code.
- ''getResponseCookies'' returns ''false'' if no cookies are set; otherwise it returns an enumerated array of associative arrays each of which contains information for an individual cookie such as its name, value, and expiration date. 
- ''getResponseHeader'' will return an associative array of all headers indexed by header name (in all lowercase) if no parameter is passed to it; otherwise, it takes a single string parameter containing a specific header name for which it will return the value.

''sendRequest'' does not modify any parameters set by you that are specific to the request (as opposed to the response). That is, request instances can be reused and individual parameters modified only as needed to change what differs between consecutive requests. To "start fresh" with an existing request instance, simply explicitly call its constructor method.

<code php>
<?php
$request =& new HTTP_Request;
// ...
$request->HTTP_Request();
// all parameters previously set will be cleared
?>
</code>

=1=Juggling Data=1=

''HTTP_Request'' makes data management pretty easy and straightforward, so it's all covered in this section.

<code php>
<?php
$request =& new HTTP_Request('http://localhost.example');

// GET
$request->addQueryString('variable', 'value');
$request->addRawQueryString('foo=bar');

// POST
$request->addPostData('variable', 'value');
$request->clearPostData();

// COOKIE
$request->addCookie('variable', 'value');
$request->clearCookies();

// FILES
$request->addFile('fieldname', '/path/to/file', 'text/plain');
?>
</code>

- ''addRawQueryString'' isn't named very intuitively, as it actually overwrites any query string that you've previously set.
- By default, ''addQueryString'' and ''addPostData'' will URL encode the variable value. To prevent this if your data is already preencoded, pass the value ''true'' as the third parameter to either method.
- ''clearPostData'' and ''clearCookies'' reset internal variables used to store data passed in by ''addQueryString'' and ''addPostData'' respectively.
- ''setURL'' and ''addQueryString'' or ''addRawQueryString'' can be used together to control the content of the internal variable for the URL of the request. ''getURL'' can be used to see the effects of these during development.
- ''addFile'' is intended to simulate uploading a file via a file input field in an HTML form. For forms with multiple file upload files with the same name, pass an array of file paths as the second parameter and (optionally) an array of corresponding file MIME types as the third parameter. 
- To send the contents of a file as the entire body of a request, use ''file_get_contents'' to retrieve the file contents into a string and pass that to the ''setBody'' method of the request instance.

=1=Wrangling Headers=1=

Handling headers is also relatively straightforward. The only header-specific convenience method that's included is for handling Basic HTTP authentication, as shown below.

<code php>
<?php
$request =& new HTTP_Request;
$request->addHeader('name', 'value');
$request->removeHeader('name');
$request->setBasicAuth('username', 'password');
?>
</code>

=1=Using the Client=1=

''HTTP_Client'' persists explicit sets of headers and requests parameters across multiple requests, which are set using the ''setDefaultHeader'' and ''setRequestParameter'' methods respectively. The client constructor also accepts arrays of these. Default headers and request parameters can be cleared by calling ''reset'' on the client instance.

Internally, the client class actually creates a new instance of ''HTTP_Request'' per request. The request operation is set depending on which of the client instance methods are called; ''get'', ''head'', and ''post'' are supported.

The capabilities of the client described up to this point can all be accomplished by reusing the same request instance for multiple requests. However, the client also handles two things that the request class does not: cookies and redirects.

By default, cookies are persisted automatically across requests without any additional configuration. ''HTTP_Client_CookieManager'' is used internally for this. For custom cookie handling, this class can be extended and an instance of it passed as the third parameter to the client constructor. If this is done, that instance will be used rather than an instance of the native cookie manager class being created by default.

The maximum number of redirects to process can be set using the ''setMaxRedirects'' method of the client class. Internally, requests will be created and sent as needed to process the redirect until a non-redirecting response is received or the maximum redirect limit is reached. In the former case, the client method being called will return an integer containing the response code rather than ''true'' as the request class does. In the latter case, the client method will return an error instance. Note that the client class will process redirects contained in ''meta'' tags of HTML documents in addition to those performed at the HTTP level.

To retrieve information for the last response received, use the ''currentResponse'' method of the client instance. It will return an associative array containing the keys '''code''', '''headers''', and '''body''' with values corresponding to the return values of request methods ''getResponseCode'', ''getResponseHeader'', and ''getResponseBody'' respectively.

By default, all responses are stored and can be accessed individually as shown below. To disable storage of all responses except the last one, call ''enableHistory'' on the client instance and pass it ''false''.

<code php>
<?php
for ($client->rewind(); $client->valid(); $client->next()) {
    $url = $client->key();
    $response = $client->current();
}
?>
</code>

=1=Observing Requests=1=

Both ''HTTP_Request'' and ''HTTP_Client'' have ''attach'' and ''detach'' methods for adding and removing instances of ''HTTP_Request_Listener''. This class implements the observer design pattern and serves to intercept events that occur during the process of transmitting a request and receiving a response. To create an observer, first create a class that extends ''HTTP_Request_Listener'' as shown below.

<code php>
<?php
class Custom_Request_Listener extends HTTP_Request_Listener
{
    function Custom_Request_Listener()
    {
        $this->HTTP_Request_Listener();
    }

    function update(&$subject, $event, $data = null)
    {
        switch ($event) {
            // Request events
            case 'connect':      // handle the 'connect' event
            case 'sentRequest':  // ...
            case 'disconnect':   // ...

            // Response events
            case 'gotHeaders':   // ...
            case 'tick':         // ...
            case 'gztick':       // ...
            case 'gotBody':      // ...

            // Client events
            case 'request':      // ...
            case 'httpSuccess':  // ...
            case 'httpRedirect': // ...
            case 'httpError':    // ...

            default:
                PEAR::raiseError('Unhandled error: ' . $event);
        }
    }
}
?>
</code>

- Declare a constructor that calls the parent constructor and performs any needed custom logic.
- Declare the ''update'' method with the signature shown. ''$subject'' is the request or client instance to which the listener is attached. ''$event'' is a string containing one of the events shown in the ''switch'' statement.
- ''$data'' is data specific to events related to reception of the server response.
- Request and response events occur within ''HTTP_Request'' instances. Client events occur within ''HTTP_Client'' instances.
- Note that not all events need to be handled, only those with which you are concerned.

The ''attach'' method in ''HTTP_Request'' takes a single parameter, a listener instance. The equivalent method in ''HTTP_Client'' takes two parameters, a required listener instance and an optional boolean flag. When the latter is ''false'' (which it is by default), attached listeners will not be propagated to requests created within the client instance. That is, a listener added will not be notified of request and response events, only client events. To have an added listener receive all events, explicitly specify the ''$propagate'' parameter to be ''true'' when calling ''attach''.

{{PEAR References

For more information on the PEAR packages covered here, see these resources.

- http://pear.php.net/manual/en/package.http.http-request.php 
- http://pear.php.net/manual/en/package.http.http-client.php 
- http://pear.php.net/manual/en/package.http.http-request.listeners.php}} 
